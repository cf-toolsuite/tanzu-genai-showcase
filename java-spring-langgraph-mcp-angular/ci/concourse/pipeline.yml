---
# Concourse CI/CD Pipeline for java-spring-langgraph-mcp-angular
# Equivalent to GitHub Actions workflow: java-spring-langgraph-mcp-angular.yml and deploy-java-spring-langgraph-mcp-angular-to-tp4cf.yml

resource_types:
  - name: cf-cli
    type: docker-image
    source:
      repository: nulldriver/cf-cli-resource
      tag: latest

resources:
  - name: source-code
    type: git
    source:
      uri: ((git_repo_url))
      branch: ((git_branch))
      paths:
        - java-spring-langgraph-mcp-angular/**
        - java-spring-langgraph-mcp-angular/ci/concourse/**

  - name: build-artifacts
    type: s3
    source:
      bucket: ((artifact_bucket))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
      region_name: ((aws_region))
      versioned_file: java-spring-langgraph-mcp-angular/artifacts.tar.gz

  - name: cf-environment
    type: cf-cli
    source:
      api: ((cf_api))
      username: ((cf_username))
      password: ((cf_password))
      org: ((cf_org))
      space: ((cf_space))

jobs:
  - name: build-backend
    plan:
      - get: source-code
        trigger: true
      - task: build-backend
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: maven
              tag: '3.9-eclipse-temurin-17'
          inputs:
            - name: source-code
          outputs:
            - name: backend-build
          run:
            path: bash
            args:
              - -c
              - |
                cd source-code/java-spring-langgraph-mcp-angular

                # Build backend with Maven
                echo "Building backend with Maven..."
                mvn -B clean package -f backend/pom.xml

                # Copy JAR to output
                echo "Copying backend artifacts..."
                mkdir -p ../../backend-build
                cp backend/target/*.jar ../../backend-build/

  - name: build-frontend
    plan:
      - get: source-code
        trigger: true
      - task: build-frontend
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: node
              tag: '18'
          inputs:
            - name: source-code
          outputs:
            - name: frontend-build
          run:
            path: bash
            args:
              - -c
              - |
                cd source-code/java-spring-langgraph-mcp-angular/frontend

                # Install dependencies
                echo "Installing frontend dependencies..."
                npm install

                # Build frontend
                echo "Building frontend..."
                npm run build -- --configuration production

                # Copy build to output
                echo "Copying frontend artifacts..."
                mkdir -p ../../../frontend-build
                cp -r dist ../../../frontend-build/

  - name: package
    plan:
      - get: source-code
        passed: [build-backend, build-frontend]
        trigger: true
      - get: backend-build
        passed: [build-backend]
      - get: frontend-build
        passed: [build-frontend]
      - task: create-package
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ubuntu
              tag: latest
          inputs:
            - name: source-code
            - name: backend-build
            - name: frontend-build
          outputs:
            - name: build-output
          run:
            path: bash
            args:
              - -c
              - |
                # Create deployment package
                echo "Creating deployment package..."
                mkdir -p build-output/app

                # Copy backend JAR
                echo "Copying backend JAR..."
                cp backend-build/*.jar build-output/app/app.jar

                # Copy frontend build
                echo "Copying frontend build..."
                mkdir -p build-output/app/public
                cp -r frontend-build/dist/* build-output/app/public/

                # Copy manifest
                echo "Copying manifest..."
                cp source-code/java-spring-langgraph-mcp-angular/manifest.yml build-output/app/

                # Create tarball
                cd build-output
                tar -czf artifacts.tar.gz app
      - put: build-artifacts
        params:
          file: build-output/artifacts.tar.gz

  - name: deploy-to-cf
    plan:
      - get: source-code
        passed: [package]
        trigger: true
      - get: build-artifacts
        passed: [package]
      - task: prepare-deployment
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ubuntu
              tag: latest
          inputs:
            - name: source-code
            - name: build-artifacts
          outputs:
            - name: app-to-deploy
          run:
            path: bash
            args:
              - -c
              - |
                # Extract artifacts
                mkdir -p app-to-deploy
                tar -xzf build-artifacts/artifacts.tar.gz -C app-to-deploy
      - put: cf-environment
        params:
          command: push
          app_name: java-spring-langgraph-mcp-angular
          path: app-to-deploy/app
          manifest: app-to-deploy/app/manifest.yml
          no_start: true
      - put: cf-environment
        params:
          command: set-env
          app_name: java-spring-langgraph-mcp-angular
          env:
            SPRING_PROFILES_ACTIVE: cloud
            OPENAI_API_KEY: ((openai_api_key))
      - put: cf-environment
        params:
          command: start
          app_name: java-spring-langgraph-mcp-angular
          staging_timeout: 15
          startup_timeout: 5
