name: On-Demand CF Deploy

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Application to deploy'
        required: true
        type: choice
        options:
          - dotnet-extensions-ai
          - go-fiber-langchaingo
          - java-spring-ai-mcp/client
          - java-spring-ai-mcp/server
          - java-spring-langgraph-mcp-angular
          - js-langchain-react
          - php-symfony-neuron
          - py-django-crewai
          - ruby-sinatra-fastmcp
      cf_api:
        description: 'Cloud Foundry API Endpoint'
        required: true
        type: string
      cf_username:
        description: 'Cloud Foundry Username'
        required: true
        type: string
      cf_org:
        description: 'Cloud Foundry Target Organization'
        required: true
        type: string
      cf_space:
        description: 'Cloud Foundry Target Space'
        required: true
        type: string
      genai_plan:
        description: 'GenAI Service Plan Name (if needed by app)'
        required: false
        type: string
      db_service_type:
        description: 'Database Service Type (e.g., postgresql, mysql, if needed)'
        required: false
        type: string
        default: 'postgresql'
      db_plan:
        description: 'Database Service Plan Name (if needed by app)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: CloudFoundry # Optional: Define a GitHub environment for secrets/protection rules

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install CF CLI v8
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install cf8-cli

      - name: Authenticate to Cloud Foundry
        run: |
          cf api "${{ inputs.cf_api }}"
          cf auth "${{ inputs.cf_username }}" "${{ secrets.CF_PASSWORD }}" # Use GitHub secret for password
        env:
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }} # Pass secret securely

      - name: Check/Create Organization
        run: |
          if ! cf org --guid "${{ inputs.cf_org }}"; then
            echo "Organization '${{ inputs.cf_org }}' not found. Creating..."
            cf create-org "${{ inputs.cf_org }}"
          else
            echo "Organization '${{ inputs.cf_org }}' found."
          fi
        # continue-on-error: true # Or use the if condition like above

      - name: Check/Create Space
        run: |
          if ! cf space --guid "${{ inputs.cf_space }}" -o "${{ inputs.cf_org }}"; then
            echo "Space '${{ inputs.cf_space }}' not found in org '${{ inputs.cf_org }}'. Creating..."
            cf create-space "${{ inputs.cf_space }}" -o "${{ inputs.cf_org }}"
          else
            echo "Space '${{ inputs.cf_space }}' found."
          fi
        # continue-on-error: true # Or use the if condition like above

      - name: Target Org and Space
        run: |
          cf target -o "${{ inputs.cf_org }}" -s "${{ inputs.cf_space }}"

      # ==================================
      # === Project Specific Setups ======
      # ==================================

      # --- .NET Setup ---
      - name: Setup .NET SDK (if needed by dotnet-extensions-ai)
        if: startsWith(inputs.project, 'dotnet-extensions-ai')
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: dotnet-extensions-ai/global.json

      - name: Build .NET App (if needed by dotnet-extensions-ai)
        if: startsWith(inputs.project, 'dotnet-extensions-ai')
        run: dotnet publish -c Release -o ./publish
        working-directory: ${{ inputs.project }}

      # --- Go Setup ---
      - name: Setup Go (if needed by go-fiber-langchaingo)
        if: startsWith(inputs.project, 'go-fiber-langchaingo')
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go-fiber-langchaingo/go.mod'
          cache: true

      - name: Build Go App (if needed by go-fiber-langchaingo)
        if: startsWith(inputs.project, 'go-fiber-langchaingo')
        run: go build -o congress-chatbot cmd/server/main.go
        working-directory: ${{ inputs.project }}

      # --- Java/Maven Setup ---
      - name: Setup Java JDK (if needed by java projects)
        if: startsWith(inputs.project, 'java-')
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: | # Use appropriate versions
            ${{ startsWith(inputs.project, 'java-spring-ai-mcp') && '21' || '' }}
            ${{ startsWith(inputs.project, 'java-spring-langgraph-mcp-angular') && '17' || '' }}

      - name: Cache Maven Repository (if needed by java projects)
        if: startsWith(inputs.project, 'java-')
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles(format('{0}/pom.xml', inputs.project)) }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java App (if needed by java projects)
        if: startsWith(inputs.project, 'java-')
        run: mvn -B package --file pom.xml -DskipTests # Skip tests during deploy workflow
        working-directory: ${{ inputs.project }}

      # --- Node.js Setup ---
      - name: Setup Node.js (if needed by js or angular projects)
        if: startsWith(inputs.project, 'js-') || contains(inputs.project, 'angular')
        uses: actions/setup-node@v4
        with:
          node-version: |
            ${{ startsWith(inputs.project, 'js-langchain-react') && '22' || '' }}
            ${{ startsWith(inputs.project, 'java-spring-langgraph-mcp-angular') && '18' || '' }}
            ${{ startsWith(inputs.project, 'py-django-crewai') && '18' || '' }}

      - name: Install Node Dependencies (if needed)
        if: startsWith(inputs.project, 'js-') || contains(inputs.project, 'angular')
        run: npm install
        working-directory: ${{ inputs.project }}

      - name: Build Node App (if needed by js-langchain-react)
        if: startsWith(inputs.project, 'js-langchain-react')
        run: npm run build
        working-directory: ${{ inputs.project }}
      # Note: java-spring-langgraph-mcp-angular frontend is built by Maven

      # --- PHP Setup ---
      - name: Setup PHP (if needed by php-symfony-neuron)
        if: startsWith(inputs.project, 'php-symfony-neuron')
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Or newer if needed
          extensions: mbstring, xml, ctype, iconv, pdo, pdo_mysql, zip # Add others if needed
          coverage: none
          tools: composer:v2

      - name: Cache Composer (if needed by php-symfony-neuron)
        if: startsWith(inputs.project, 'php-symfony-neuron')
        uses: actions/cache@v3
        with:
          path: ${{ inputs.project }}/vendor
          key: ${{ runner.os }}-php-${{ hashFiles(format('{0}/composer.lock', inputs.project)) }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP Dependencies (if needed by php-symfony-neuron)
        if: startsWith(inputs.project, 'php-symfony-neuron')
        run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
        working-directory: ${{ inputs.project }}

      # --- Python Setup ---
      - name: Setup Python (if needed by py-django-crewai)
        if: startsWith(inputs.project, 'py-django-crewai')
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: ${{ inputs.project }}/requirements.txt

      - name: Install Python Dependencies (if needed by py-django-crewai)
        if: startsWith(inputs.project, 'py-django-crewai')
        run: pip install -r requirements.txt
        working-directory: ${{ inputs.project }}

      - name: Collect Static Files (if needed by py-django-crewai)
        if: startsWith(inputs.project, 'py-django-crewai')
        run: python manage.py collectstatic --noinput
        working-directory: ${{ inputs.project }}

      # --- Ruby Setup ---
      - name: Setup Ruby (if needed by ruby-sinatra-fastmcp)
        if: startsWith(inputs.project, 'ruby-sinatra-fastmcp')
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Or newer if needed
          bundler-cache: true # Automatically caches gems

      - name: Install Ruby Dependencies (if needed by ruby-sinatra-fastmcp)
        if: startsWith(inputs.project, 'ruby-sinatra-fastmcp')
        run: bundle install --jobs 4 --retry 3
        working-directory: ${{ inputs.project }}

      # ==================================
      # === Service Creation =============
      # ==================================
      - name: Create GenAI Service (if needed by dotnet-extensions-ai)
        if: inputs.project == 'dotnet-extensions-ai'
        run: |
          if ! cf service travel-advisor-llm; then
            echo "Creating GenAI service: travel-advisor-llm"
            cf create-service genai "${{ inputs.genai_plan }}" travel-advisor-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service travel-advisor-llm already exists."
          fi
        continue-on-error: true # Allow failure if service exists or plan is wrong

      - name: Create GenAI Service (if needed by go-fiber-langchaingo)
        if: inputs.project == 'go-fiber-langchaingo'
        run: |
          if ! cf service congress-llm; then
            echo "Creating GenAI service: congress-llm"
            cf create-service genai "${{ inputs.genai_plan }}" congress-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service congress-llm already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by java-spring-ai-mcp/client)
        if: inputs.project == 'java-spring-ai-mcp/client'
        run: |
          if ! cf service tracker-llm-service; then
            echo "Creating GenAI service: tracker-llm-service"
            cf create-service genai "${{ inputs.genai_plan }}" tracker-llm-service -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service tracker-llm-service already exists."
          fi
        continue-on-error: true

      - name: Create User Provided Service (if needed by java-spring-ai-mcp/server)
        # This requires the AVIATION_STACK_ACCESS_KEY secret
        if: inputs.project == 'java-spring-ai-mcp/server' && secrets.AVIATION_STACK_ACCESS_KEY != ''
        run: |
          if ! cf service aviation-stack-service-credentials; then
            echo "Creating user-provided service: aviation-stack-service-credentials"
            cf create-user-provided-service aviation-stack-service-credentials -p '{"access_key":"${{ secrets.AVIATION_STACK_ACCESS_KEY }}"}' || echo "UPS creation might have failed or already exists"
          else
            echo "UPS aviation-stack-service-credentials already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by java-spring-langgraph-mcp-angular)
        if: inputs.project == 'java-spring-langgraph-mcp-angular'
        run: |
          if ! cf service genai-llm-service; then
            echo "Creating GenAI service: genai-llm-service"
            cf create-service genai "${{ inputs.genai_plan }}" genai-llm-service -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service genai-llm-service already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by js-langchain-react)
        if: inputs.project == 'js-langchain-react'
        run: |
          if ! cf service news-aggregator-llm; then
            echo "Creating GenAI service: news-aggregator-llm"
            cf create-service genai "${{ inputs.genai_plan }}" news-aggregator-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service news-aggregator-llm already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by php-symfony-neuron)
        if: inputs.project == 'php-symfony-neuron'
        run: |
          if ! cf service php-symfony-neuron-llm; then
            echo "Creating GenAI service: php-symfony-neuron-llm"
            cf create-service genai "${{ inputs.genai_plan }}" php-symfony-neuron-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service php-symfony-neuron-llm already exists."
          fi
        continue-on-error: true

      - name: Create DB Service (if needed by php-symfony-neuron)
        if: inputs.project == 'php-symfony-neuron' && inputs.db_plan != ''
        run: |
          if ! cf service php-symfony-neuron-db; then
            echo "Creating DB service: php-symfony-neuron-db"
            cf create-service "${{ inputs.db_service_type }}" "${{ inputs.db_plan }}" php-symfony-neuron-db || echo "DB Service creation might have failed or already exists"
          else
            echo "DB service php-symfony-neuron-db already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by py-django-crewai)
        if: inputs.project == 'py-django-crewai'
        run: |
          if ! cf service movie-chatbot-llm; then
            echo "Creating GenAI service: movie-chatbot-llm"
            cf create-service genai "${{ inputs.genai_plan }}" movie-chatbot-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service movie-chatbot-llm already exists."
          fi
        continue-on-error: true

      - name: Create DB Service (if needed by py-django-crewai)
        if: inputs.project == 'py-django-crewai' && inputs.db_plan != ''
        run: |
          if ! cf service movie-chatbot-db; then
            echo "Creating DB service: movie-chatbot-db"
            cf create-service "${{ inputs.db_service_type }}" "${{ inputs.db_plan }}" movie-chatbot-db || echo "DB Service creation might have failed or already exists"
          else
            echo "DB service movie-chatbot-db already exists."
          fi
        continue-on-error: true

      - name: Create GenAI Service (if needed by ruby-sinatra-fastmcp)
        if: inputs.project == 'ruby-sinatra-fastmcp'
        run: |
          if ! cf service flight-tracking-bot-llm; then
            echo "Creating GenAI service: flight-tracking-bot-llm"
            cf create-service genai "${{ inputs.genai_plan }}" flight-tracking-bot-llm -t genai,llm || echo "Service creation might have failed or already exists"
          else
            echo "GenAI service flight-tracking-bot-llm already exists."
          fi
        continue-on-error: true

      # ==================================
      # === Deploy Application ===========
      # ==================================
      - name: Push Application to Cloud Foundry
        run: |
          # Determine app name from manifest or project name
          APP_NAME=$(grep 'name:' manifest.yml | head -n 1 | awk '{print $3}')
          if [ -z "$APP_NAME" ]; then
            APP_NAME=$(basename "${{ inputs.project }}") # Fallback to directory name
          fi
          echo "Deploying application: $APP_NAME from project: ${{ inputs.project }}"

          # Push the application without starting it
          cf push "$APP_NAME" -f manifest.yml --no-start || echo "cf push failed, check logs."

          # Bind services specified in the manifest (if any) or manually if needed
          # Example manual binding (better handled by manifest or checking existing bindings)
          # cf bind-service "$APP_NAME" "${APP_NAME}-llm" || echo "LLM binding might have failed or already done."
          # cf bind-service "$APP_NAME" "${APP_NAME}-db" || echo "DB binding might have failed or already done."

          # Set environment variables for secrets
          # Note: This requires GitHub secrets to be pre-configured with these exact names
          echo "Setting environment variables..."
          if [[ "${{ inputs.project }}" == "dotnet-extensions-ai" && "${{ secrets.GOOGLEMAPS_API_KEY }}" != "" ]]; then
            cf set-env "$APP_NAME" GOOGLEMAPS__APIKEY "${{ secrets.GOOGLEMAPS_API_KEY }}"
          fi
          if [[ "${{ inputs.project }}" == "go-fiber-langchaingo" && "${{ secrets.CONGRESS_API_KEY }}" != "" ]]; then
            cf set-env "$APP_NAME" CONGRESS_API_KEY "${{ secrets.CONGRESS_API_KEY }}"
          fi
          if [[ "${{ inputs.project }}" == "java-spring-ai-mcp/server" && "${{ secrets.AVIATION_STACK_ACCESS_KEY }}" != "" ]]; then
            # Check if the UPS was created successfully before setting env var
            if cf service aviation-stack-service-credentials; then
              echo "UPS exists, not setting env var directly for server."
            else
               # Fallback if UPS failed
               cf set-env "$APP_NAME" AVIATION_STACK_ACCESS_KEY "${{ secrets.AVIATION_STACK_ACCESS_KEY }}"
            fi
          fi
          if [[ "${{ inputs.project }}" == "java-spring-ai-mcp/client" && "${{ secrets.OPENAI_API_KEY }}" != "" ]]; then
             # Client might use service binding OR direct key
             cf set-env "$APP_NAME" SPRING_AI_OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}"
          fi
          if [[ "${{ inputs.project }}" == "java-spring-langgraph-mcp-angular" ]]; then
            if [[ "${{ secrets.TICKETMASTER_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" TICKETMASTER_API_KEY "${{ secrets.TICKETMASTER_API_KEY }}"; fi
            if [[ "${{ secrets.CITIES_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" CITIES_API_KEY "${{ secrets.CITIES_API_KEY }}"; fi
            if [[ "${{ secrets.OPENAI_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" SPRING_AI_OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}"; fi
          fi
          if [[ "${{ inputs.project }}" == "js-langchain-react" ]]; then
            if [[ "${{ secrets.NEWS_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" NEWS_API_KEY "${{ secrets.NEWS_API_KEY }}"; fi
            if [[ "${{ secrets.LLM_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" API_KEY "${{ secrets.LLM_API_KEY }}"; fi
          fi
          if [[ "${{ inputs.project }}" == "php-symfony-neuron" ]]; then
             if [[ "${{ secrets.STOCK_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" STOCK_API_KEY "${{ secrets.STOCK_API_KEY }}"; fi
             if [[ "${{ secrets.NEWS_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" NEWS_API_KEY "${{ secrets.NEWS_API_KEY }}"; fi
             if [[ "${{ secrets.EDGAR_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" EDGAR_API_KEY "${{ secrets.EDGAR_API_KEY }}"; fi
             if [[ "${{ secrets.OPENAI_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}"; fi
             if [[ "${{ secrets.LINKEDIN_CLIENT_ID }}" != "" ]]; then cf set-env "$APP_NAME" LINKEDIN_CLIENT_ID "${{ secrets.LINKEDIN_CLIENT_ID }}"; fi
             if [[ "${{ secrets.LINKEDIN_CLIENT_SECRET }}" != "" ]]; then cf set-env "$APP_NAME" LINKEDIN_CLIENT_SECRET "${{ secrets.LINKEDIN_CLIENT_SECRET }}"; fi
             # DATABASE_URL usually comes from service binding
          fi
          if [[ "${{ inputs.project }}" == "py-django-crewai" ]]; then
             if [[ "${{ secrets.DJANGO_SECRET_KEY }}" != "" ]]; then cf set-env "$APP_NAME" DJANGO_SECRET_KEY "${{ secrets.DJANGO_SECRET_KEY }}"; fi
             if [[ "${{ secrets.OPENAI_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}"; fi
             if [[ "${{ secrets.TMDB_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" TMDB_API_KEY "${{ secrets.TMDB_API_KEY }}"; fi
             if [[ "${{ secrets.SERPAPI_API_KEY }}" != "" ]]; then cf set-env "$APP_NAME" SERPAPI_API_KEY "${{ secrets.SERPAPI_API_KEY }}"; fi
             # DATABASE_URL usually comes from service binding
          fi
          if [[ "${{ inputs.project }}" == "ruby-sinatra-fastmcp" && "${{ secrets.AVIATIONSTACK_API_KEY }}" != "" ]]; then
            cf set-env "$APP_NAME" AVIATIONSTACK_API_KEY "${{ secrets.AVIATIONSTACK_API_KEY }}"
          fi

          echo "Starting application..."
          cf start "$APP_NAME"

        working-directory: ${{ inputs.project }} # Ensure push happens from the correct directory
        env:
          CF_STAGING_TIMEOUT: 15
          CF_STARTUP_TIMEOUT: 5
