# BitBucket Pipelines for ruby-sinatra-fastmcp
# Equivalent to GitHub Actions workflow: ruby-sinatra-fastmcp.yml

image: ruby:3.3.6

definitions:
  caches:
    bundler: vendor/bundle

pipelines:
  default:
    - step:
        name: Install and Test
        caches:
          - bundler
        script:
          - cd ruby-sinatra-fastmcp
          - gem install bundler
          - bundle config set --local path 'vendor/bundle'
          - bundle install
          - |
            if [ -d "test" ]; then
              bundle exec rake test || echo "Test execution failed"
            else
              echo "No tests found, skipping tests"
            fi

  branches:
    main:
      - step:
          name: Install and Test
          caches:
            - bundler
          script:
            - cd ruby-sinatra-fastmcp
            - gem install bundler
            - bundle config set --local path 'vendor/bundle'
            - bundle install
            - |
              if [ -d "test" ]; then
                bundle exec rake test || echo "Test execution failed"
              else
                echo "No tests found, skipping tests"
              fi
      - step:
          name: Build and Upload
          caches:
            - bundler
          script:
            - cd ruby-sinatra-fastmcp
            - mkdir -p dist
            - zip -r dist/ruby-sinatra-fastmcp.zip . -x "*.git*" "*.env*" ".github/*" "dist/*" "test/*" "spec/*" "vendor/*"
            - pipe: atlassian/bitbucket-upload-file:0.3.2
              variables:
                BITBUCKET_USERNAME: $BITBUCKET_USERNAME
                BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD
                FILENAME: 'dist/ruby-sinatra-fastmcp.zip'
                TARGET: 'artifacts/ruby-sinatra-fastmcp-${BITBUCKET_BUILD_NUMBER}.zip'
          artifacts:
            - ruby-sinatra-fastmcp/dist/**
      - step:
          name: Deploy to Cloud Foundry
          deployment: production
          trigger: manual
          script:
            - apt-get update && apt-get install -y wget gnupg2 apt-transport-https
            - wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            - echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            - apt-get update && apt-get install -y cf8-cli jq
            - cd ruby-sinatra-fastmcp
            - echo "Deploying to Cloud Foundry..."
            - cf api $CF_API
            - cf auth $CF_USERNAME $CF_PASSWORD
            - cf target -o $CF_ORG -s $CF_SPACE

            # Create GenAI service if it doesn't exist
            - |
              if ! cf service flight-tracking-bot-llm > /dev/null 2>&1; then
                echo "Creating GenAI service..."
                cf create-service genai standard flight-tracking-bot-llm || echo "Service creation failed, it might already exist or plan is not available"
              else
                echo "GenAI service already exists"
              fi

            # Set environment variables
            - |
              APP_NAME=$(grep 'name:' manifest.yml | head -n 1 | awk '{print $2}')
              if [ -z "$APP_NAME" ]; then
                APP_NAME=$(basename $(pwd)) # Fallback to directory name
              fi

              # Push the application without starting it
              if [ "$RANDOM_ROUTE" = "true" ]; then
                echo "Pushing with random route..."
                cf push "$APP_NAME" -f manifest.yml --no-start --random-route
              else
                echo "Pushing with route from manifest..."
                cf push "$APP_NAME" -f manifest.yml --no-start
              fi

              # Set environment variables
              if [ -n "$AVIATIONSTACK_API_KEY" ]; then
                cf set-env "$APP_NAME" "AVIATIONSTACK_API_KEY" "$AVIATIONSTACK_API_KEY"
              fi

              # Start the application
              cf start "$APP_NAME"

clone:
  depth: full

options:
  max-time: 20

# Custom deployment variables
# These can be set in the Bitbucket repository settings
# CF_API: Cloud Foundry API endpoint
# CF_USERNAME: Cloud Foundry username
# CF_PASSWORD: Cloud Foundry password
# CF_ORG: Cloud Foundry organization
# CF_SPACE: Cloud Foundry space
# RANDOM_ROUTE: Whether to use a random route (true/false)
# AVIATIONSTACK_API_KEY: AviationStack API key
