// Jenkins Pipeline for dotnet-extensions-ai
// Equivalent to GitHub Actions workflow: dotnet-extensions-ai.yml

pipeline {
    agent any

    tools {
        dotnetsdk 'dotnet-sdk-latest'
    }

    options {
        // Only keep the 10 most recent builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    // Only run on changes to project files or CI configuration
    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage('Restore Dependencies') {
            when {
                anyOf {
                    changeset 'dotnet-extensions-ai/**'
                    changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    // Cache NuGet packages
                    cache(path: '${HOME}/.nuget/packages', key: "${env.JOB_NAME}") {
                        sh 'dotnet restore'
                    }
                }
            }
        }

        stage('Build') {
            when {
                anyOf {
                    changeset 'dotnet-extensions-ai/**'
                    changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    sh 'dotnet build --no-restore'
                }
            }
        }

        stage('Test') {
            when {
                anyOf {
                    changeset 'dotnet-extensions-ai/**'
                    changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    sh 'dotnet test --no-build --verbosity normal'
                }
            }
        }

        stage('Publish') {
            when {
                allOf {
                    branch 'main'
                    anyOf {
                        changeset 'dotnet-extensions-ai/**'
                        changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                    }
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    sh 'dotnet publish -c Release -o ./publish'
                }
            }
        }

        stage('Upload Artifacts') {
            when {
                allOf {
                    branch 'main'
                    anyOf {
                        changeset 'dotnet-extensions-ai/**'
                        changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                    }
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    // Archive the artifacts in Jenkins
                    archiveArtifacts artifacts: 'publish/**', fingerprint: true
                }
            }
        }

        stage('Deploy to Cloud Foundry') {
            when {
                allOf {
                    branch 'main'
                    anyOf {
                        changeset 'dotnet-extensions-ai/**'
                        changeset 'dotnet-extensions-ai/ci/jenkins/Jenkinsfile'
                    }
                }
            }
            // This stage requires manual triggering
            input {
                message "Deploy to Cloud Foundry?"
                ok "Yes, deploy it!"
                parameters {
                    string(name: 'CF_API', defaultValue: '', description: 'Cloud Foundry API Endpoint')
                    string(name: 'CF_USERNAME', defaultValue: '', description: 'Cloud Foundry Username')
                    password(name: 'CF_PASSWORD', defaultValue: '', description: 'Cloud Foundry Password')
                    string(name: 'CF_ORG', defaultValue: '', description: 'Cloud Foundry Organization')
                    string(name: 'CF_SPACE', defaultValue: '', description: 'Cloud Foundry Space')
                    booleanParam(name: 'RANDOM_ROUTE', defaultValue: false, description: 'Use random route for the application')
                    password(name: 'GOOGLEMAPS_API_KEY', defaultValue: '', description: 'Google Maps API Key')
                }
            }
            steps {
                dir('dotnet-extensions-ai') {
                    // Install CF CLI
                    sh '''
                        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
                        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
                        sudo apt-get update
                        sudo apt-get install -y cf8-cli
                    '''

                    // Deploy to Cloud Foundry
                    sh '''
                        echo "Deploying to Cloud Foundry..."
                        cf api "${CF_API}"
                        cf auth "${CF_USERNAME}" "${CF_PASSWORD}"
                        cf target -o "${CF_ORG}" -s "${CF_SPACE}"

                        # Create GenAI service if it doesn't exist
                        if ! cf service travel-advisor-llm > /dev/null 2>&1; then
                            echo "Creating GenAI service..."
                            cf create-service genai standard travel-advisor-llm || echo "Service creation failed, it might already exist or plan is not available"
                        else
                            echo "GenAI service already exists"
                        fi

                        # Set environment variables
                        APP_NAME=$(grep 'name:' manifest.yml | head -n 1 | awk '{print $2}')
                        if [ -z "$APP_NAME" ]; then
                            APP_NAME=$(basename $(pwd)) # Fallback to directory name
                        fi

                        # Push the application without starting it
                        if [ "${RANDOM_ROUTE}" = "true" ]; then
                            echo "Pushing with random route..."
                            cf push "$APP_NAME" -f manifest.yml --no-start --random-route
                        else
                            echo "Pushing with route from manifest..."
                            cf push "$APP_NAME" -f manifest.yml --no-start
                        fi

                        # Set environment variables
                        if [ -n "${GOOGLEMAPS_API_KEY}" ]; then
                            cf set-env "$APP_NAME" "GOOGLEMAPS__APIKEY" "${GOOGLEMAPS_API_KEY}"
                        fi

                        # Start the application
                        cf start "$APP_NAME"
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
