@page "/advisor"
@using TravelAdvisor.Core.Models
@using TravelAdvisor.Core.Services
@inject ITravelAdvisorService TravelAdvisorService

<PageTitle>Travel Advisor</PageTitle>

<div class="container mx-auto py-6">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Transportation Mode Recommendation Bot</h1>
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6" role="alert">
            <p class="text-red-700">@ErrorMessage</p>
        </div>
    }
    
    <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
        <!-- Input Form Column -->
        <div class="md:col-span-5">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="border-b border-gray-200 bg-gray-50 px-4 py-3">
                    <h2 class="text-lg font-medium text-gray-700">Plan Your Journey</h2>
                </div>
                <div class="p-4">
                    <div class="mb-4">
                        <label for="queryInput" class="block text-sm font-medium text-gray-700 mb-2">Ask a question or describe your journey</label>
                        <textarea id="queryInput" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" 
                                 rows="3" placeholder="E.g., What's the best way to get from Boston to New York? I prefer faster options and am willing to spend more for convenience."
                                 @bind="QueryText" @bind:event="oninput"></textarea>
                    </div>
                    
                    <button class="w-full py-2 px-4 rounded-md bg-primary text-white font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors" 
                            @onclick="ProcessQueryAsync" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="inline-block align-middle mr-2">
                                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <span>Get Recommendations</span>
                        }
                    </button>
                    
                    @if (CurrentQuery != null)
                    {
                        <div class="mt-6">
                            <h3 class="text-sm font-medium text-gray-700 mb-2">Understood Query:</h3>
                            <div class="bg-gray-50 rounded-md p-4">
                                <p class="text-sm mb-2"><span class="font-medium">From:</span> @CurrentQuery.Origin</p>
                                <p class="text-sm mb-2"><span class="font-medium">To:</span> @CurrentQuery.Destination</p>
                                @if (CurrentQuery.TravelTime.DepartureTime.HasValue)
                                {
                                    <p class="text-sm mb-2"><span class="font-medium">Departure:</span> @CurrentQuery.TravelTime.DepartureTime.Value.ToString("g")</p>
                                }
                                @if (CurrentQuery.TravelTime.ArrivalTime.HasValue)
                                {
                                    <p class="text-sm mb-2"><span class="font-medium">Arrival:</span> @CurrentQuery.TravelTime.ArrivalTime.Value.ToString("g")</p>
                                }
                                <p class="text-sm mb-0"><span class="font-medium">Priority:</span> @(string.IsNullOrEmpty(CurrentQuery.Preferences.Priority) ? "Not specified" : CurrentQuery.Preferences.Priority)</p>
                            </div>
                        </div>
                    }
                    
                    @if (Recommendations != null && Recommendations.Count > 0)
                    {
                    <div class="mt-6">
                    <h3 class="text-sm font-medium text-gray-700 mb-2">Available Transportation Options:</h3>
                    <div class="space-y-2">
                    @foreach (var recommendation in Recommendations)
                    {
                    <button type="button" 
                    class="w-full text-left rounded-md p-3 transition-colors @(recommendation.IsRecommended ? "bg-primary/10 border-primary text-primary border" : "bg-white hover:bg-gray-50 border border-gray-200")" 
                    @onclick="() => SelectRecommendation(recommendation)">
                    <div class="flex justify-between items-center">
                    <h4 class="font-semibold text-sm">@recommendation.Mode</h4>
                    <span class="text-xs px-2 py-1 rounded-full @(recommendation.IsRecommended ? "bg-primary/20 text-primary" : "bg-gray-100 text-gray-700")">@recommendation.OverallScore/100</span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1 mb-0">@recommendation.DurationMinutes min â€¢ @recommendation.DistanceKm.ToString("F1") km</p>
                    <p class="text-xs text-gray-500 mt-1 mb-0">@(recommendation.EstimatedCost.HasValue ? $"${recommendation.EstimatedCost.Value:F2}" : "Cost unavailable")</p>
                    </button>
                    }
                    </div>
                    </div>
                    }
                    
                    @if (Recommendations != null && Recommendations.Count == 0)
                    {
                        <div class="mt-6 bg-yellow-50 border-l-4 border-yellow-400 p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-yellow-700">No suitable transportation options found for this journey.</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            @if (SelectedRecommendation != null)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden mt-6">
                    <div class="border-b border-gray-200 bg-gray-50 px-4 py-3 flex justify-between items-center">
                        <h2 class="text-lg font-medium text-gray-700">Ask a Follow-up Question</h2>
                    </div>
                    <div class="p-4">
                        <div class="mb-4">
                            <textarea class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                                     rows="2" placeholder="E.g., How long would it take if I left during rush hour?"
                                     @bind="FollowUpQuestion" @bind:event="oninput"></textarea>
                        </div>
                        <button class="w-full py-2 px-4 rounded-md border border-primary text-primary font-medium hover:bg-primary hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
                                @onclick="AskFollowUpAsync" disabled="@IsProcessingFollowUp">
                            @if (IsProcessingFollowUp)
                            {
                                <span class="inline-block align-middle mr-2">
                                    <svg class="animate-spin h-5 w-5 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Ask Question</span>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
        
        <!-- Results Column -->
        <div class="md:col-span-7">
            @if (SelectedRecommendation != null)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="border-b border-gray-200 bg-gray-50 px-4 py-3 flex justify-between items-center">
                        <h2 class="text-lg font-medium text-gray-700">@SelectedRecommendation.Mode Recommendation</h2>
                        <span class="px-2 py-1 text-sm font-medium rounded-full bg-primary text-white">@SelectedRecommendation.OverallScore/100</span>
                    </div>
                    <div class="p-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div class="bg-gray-50 rounded-lg p-4">
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Journey Details</h3>
                                <p class="text-sm mb-2"><span class="font-medium">Distance:</span> @SelectedRecommendation.DistanceKm.ToString("F1") km</p>
                                <p class="text-sm mb-2"><span class="font-medium">Duration:</span> @SelectedRecommendation.DurationMinutes min</p>
                                <p class="text-sm mb-0"><span class="font-medium">Est. Cost:</span> @(SelectedRecommendation.EstimatedCost.HasValue ? $"${SelectedRecommendation.EstimatedCost.Value:F2}" : "Unavailable")</p>
                            </div>
                            <div class="bg-gray-50 rounded-lg p-4">
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Scores</h3>
                                <div class="mb-3">
                                    <div class="flex items-center justify-between mb-1">
                                        <span class="text-sm text-gray-600">Environmental:</span>
                                        <span class="text-sm font-medium">@SelectedRecommendation.EnvironmentalScore%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="bg-green-500 h-2.5 rounded-full" style="width: @(SelectedRecommendation.EnvironmentalScore)%"></div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="flex items-center justify-between mb-1">
                                        <span class="text-sm text-gray-600">Convenience:</span>
                                        <span class="text-sm font-medium">@SelectedRecommendation.ConvenienceScore%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="bg-blue-500 h-2.5 rounded-full" style="width: @(SelectedRecommendation.ConvenienceScore)%"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="flex items-center justify-between mb-1">
                                        <span class="text-sm text-gray-600">Preference Match:</span>
                                        <span class="text-sm font-medium">@SelectedRecommendation.PreferenceMatchScore%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="bg-yellow-500 h-2.5 rounded-full" style="width: @(SelectedRecommendation.PreferenceMatchScore)%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div>
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Pros</h3>
                                <ul class="space-y-2">
                                    @foreach (var pro in SelectedRecommendation.Pros)
                                    {
                                        <li class="bg-green-50 border-l-4 border-green-500 p-3 text-sm text-green-700 rounded-r-md">
                                            @pro
                                        </li>
                                    }
                                </ul>
                            </div>
                            <div>
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Cons</h3>
                                <ul class="space-y-2">
                                    @foreach (var con in SelectedRecommendation.Cons)
                                    {
                                        <li class="bg-red-50 border-l-4 border-red-500 p-3 text-sm text-red-700 rounded-r-md">
                                            @con
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Explanation))
                        {
                            <div class="bg-blue-50 rounded-lg p-4 mb-6">
                                <h3 class="text-sm font-medium text-blue-800 mb-2">Why This Recommendation?</h3>
                                <p class="text-sm text-blue-700">@Explanation</p>
                            </div>
                        }
                        
                        @if (SelectedRecommendation.Steps.Count > 0)
                        {
                            <div class="mb-6">
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Journey Steps</h3>
                                <ul class="divide-y divide-gray-200 border border-gray-200 rounded-lg overflow-hidden">
                                    @foreach (var step in SelectedRecommendation.Steps)
                                    {
                                        <li class="p-3 bg-white hover:bg-gray-50">
                                            <div class="flex flex-col md:flex-row md:justify-between md:items-center">
                                                <span class="text-sm text-gray-700 mb-1 md:mb-0">@step.Description</span>
                                                <span class="text-xs text-gray-500">@step.DistanceKm.ToString("F1") km â€¢ @step.DurationMinutes min</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(FollowUpAnswer))
                        {
                            <div class="bg-gray-50 rounded-lg p-4">
                                <h3 class="text-sm font-medium text-gray-700 mb-3">Follow-up Question</h3>
                                <p class="text-sm mb-2"><span class="font-medium">Q:</span> @FollowUpQuestion</p>
                                <p class="text-sm mb-0"><span class="font-medium">A:</span> @FollowUpAnswer</p>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (IsProcessing)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-8 text-center">
                        <div class="flex justify-center mb-4">
                            <svg class="animate-spin h-10 w-10 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </div>
                        <p class="text-gray-600 font-medium">Analyzing travel options...</p>
                    </div>
                </div>
            }
            else
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-8 text-center">
                        <div class="flex justify-center mb-6">
                            <svg class="h-20 w-20 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                            </svg>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-2">Let's Plan Your Journey</h3>
                        <p class="text-gray-600 max-w-md mx-auto">
                            Enter your journey details to get personalized recommendations on the best way to travel.
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string QueryText { get; set; } = string.Empty;
    private string FollowUpQuestion { get; set; } = string.Empty;
    private string FollowUpAnswer { get; set; } = string.Empty;
    private string Explanation { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    
    private bool IsProcessing { get; set; } = false;
    private bool IsProcessingFollowUp { get; set; } = false;
    
    private TravelQuery? CurrentQuery { get; set; }
    private List<TravelRecommendation>? Recommendations { get; set; }
    private TravelRecommendation? SelectedRecommendation { get; set; }
    
    private async Task ProcessQueryAsync()
    {
        try
        {
            // Clear previous state
            ErrorMessage = string.Empty;
            Explanation = string.Empty;
            FollowUpQuestion = string.Empty;
            FollowUpAnswer = string.Empty;
            SelectedRecommendation = null;
            
            // Validate query
            if (string.IsNullOrWhiteSpace(QueryText))
            {
                ErrorMessage = "Please enter a query describing your journey.";
                return;
            }
            
            // Start processing
            IsProcessing = true;
            
            // Process the natural language query
            CurrentQuery = await TravelAdvisorService.ProcessNaturalLanguageQueryAsync(QueryText);
            
            // Check if the query processing returned an error
            if (CurrentQuery.HasError)
            {
                ErrorMessage = CurrentQuery.ErrorMessage;
                Recommendations = new List<TravelRecommendation>(); // Empty list for error cases
                return;
            }
            
            // Generate recommendations
            Recommendations = await TravelAdvisorService.GenerateRecommendationsAsync(CurrentQuery);
            
            // Select the recommended option
            if (Recommendations != null && Recommendations.Count > 0)
            {
                var recommended = Recommendations.FirstOrDefault(r => r.IsRecommended) ?? Recommendations[0];
                await SelectRecommendation(recommended);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Recommendations = new List<TravelRecommendation>();
        }
        finally
        {
            IsProcessing = false;
        }
    }
    
    private async Task SelectRecommendation(TravelRecommendation recommendation)
    {
        try
        {
            SelectedRecommendation = recommendation;
            
            // Clear previous follow-up data
            FollowUpQuestion = string.Empty;
            FollowUpAnswer = string.Empty;
            
            // Generate explanation for the recommendation
            if (CurrentQuery != null)
            {
                Explanation = await TravelAdvisorService.GenerateExplanationAsync(recommendation, CurrentQuery);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
    private async Task AskFollowUpAsync()
    {
        try
        {
            // Validate question
            if (string.IsNullOrWhiteSpace(FollowUpQuestion) || SelectedRecommendation == null || CurrentQuery == null)
            {
                return;
            }
            
            // Start processing
            IsProcessingFollowUp = true;
            
            // Get answer to follow-up question
            FollowUpAnswer = await TravelAdvisorService.AnswerFollowUpQuestionAsync(
                FollowUpQuestion, SelectedRecommendation, CurrentQuery);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsProcessingFollowUp = false;
        }
    }
}
