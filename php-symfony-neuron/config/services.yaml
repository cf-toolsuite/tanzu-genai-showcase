# FILE: php-symfony-neuron/config/services.yaml
# Purpose: Defines application services and default configurations.

parameters:
    llm.api_key: '%env(GENAI_API_KEY)%'
    llm.base_url: '%env(GENAI_BASE_URL)%'
    llm.model: '%env(GENAI_MODEL)%'
    env(USE_MOCK_DATA): '%env(bool:USE_MOCK_DATA)%'
    alpha_vantage.api_key: '%env(ALPHA_VANTAGE_API_KEY)%'
    edgar_api.user_agent: '%env(SEC_EDGAR_USER_AGENT)%' # User-Agent for SEC EDGAR API from environment

services:
    # Default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies
        autoconfigure: true # Automatically registers services
        bind:
            Psr\Log\LoggerInterface: '@logger'
            # API keys are best bound in package configs or injected via constructor args

    # Makes classes in src/ available to be used as services
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            # Removed exclusion of API client implementations AND factories to enable autowiring
            # - '../src/Service/ApiClient/'

    # --- Define ALL Concrete Implementations (Real & Mock) ---
    # These need to be defined with proper arguments for the factories to locate them
    # Alpha Vantage
    App\Service\ApiClient\AlphaVantageClient:
        public: true
        arguments:
            $httpClient: '@http_client'
            $params: '@parameter_bag'
            $logger: '@logger'

    App\Service\ApiClient\MockAlphaVantageClient:
        public: true

    # Yahoo Finance
    App\Service\ApiClient\YahooFinanceClient:
        public: true
        arguments:
            $httpClient: '@http_client'
            $params: '@parameter_bag'
            $logger: '@logger'

    App\Service\ApiClient\MockYahooFinanceClient:
        public: true

    # SEC API (Edgar)
    App\Service\ApiClient\SecApiClient:
        public: true
        arguments:
            $httpClient: '@http_client'
            $params: '@parameter_bag'
            $logger: '@logger'

    App\Service\ApiClient\MockSecApiClient:
        public: true

    # News API
    App\Service\ApiClient\NewsApiClient:
        public: true
        arguments:
            $httpClient: '@http_client'
            $params: '@parameter_bag'
            $logger: '@logger'

    App\Service\ApiClient\MockNewsApiClient:
        public: true

    # Edgar API
    App\Service\ApiClient\EdgarApiClient:
        public: true
        arguments:
            $httpClient: '@http_client'
            $params: '@parameter_bag'
            $logger: '@logger'

    App\Service\ApiClient\MockEdgarApiClient:
        public: true

    # LinkedIn API
    App\Service\ApiClient\LinkedInApiClient:
        public: true
        arguments:
            $params: '@parameter_bag'
            $logger: '@logger'
            $requestStack: '@request_stack'

    App\Service\ApiClient\MockLinkedInApiClient:
        public: true

    # --- Define the Factories ---
    # We use a service locator for the factories to avoid circular dependencies
    # and allow the factories to access the correct client service.
    # Define explicit service locators for factories to avoid YAML !service_locator tag issues
    App\Service\ApiClient\EdgarClientFactory.locator:
        public: true
        class: Symfony\Component\DependencyInjection\ServiceLocator
        tags: ['container.service_locator']
        arguments:
            -
                App\Service\ApiClient\EdgarApiClient: '@App\Service\ApiClient\EdgarApiClient'
                App\Service\ApiClient\MockEdgarApiClient: '@App\Service\ApiClient\MockEdgarApiClient'

    App\Service\ApiClient\EdgarClientFactory:
        public: true
        arguments:
            $locator: '@App\Service\ApiClient\EdgarClientFactory.locator'
            $useMockData: '%env(bool:USE_MOCK_DATA)%'
        tags: ['container.service_subscriber']

    App\Service\ApiClient\LinkedInClientFactory.locator:
        public: true
        class: Symfony\Component\DependencyInjection\ServiceLocator
        tags: ['container.service_locator']
        arguments:
            -
                App\Service\ApiClient\LinkedInApiClient: '@App\Service\ApiClient\LinkedInApiClient'
                App\Service\ApiClient\MockLinkedInApiClient: '@App\Service\ApiClient\MockLinkedInApiClient'

    App\Service\ApiClient\LinkedInClientFactory:
        public: true
        arguments:
            $locator: '@App\Service\ApiClient\LinkedInClientFactory.locator'
            $useMockData: '%env(bool:USE_MOCK_DATA)%'
        tags: ['container.service_subscriber']

    App\Service\ApiClient\StockClientsFactory.locator:
        public: true
        class: Symfony\Component\DependencyInjection\ServiceLocator
        tags: ['container.service_locator']
        arguments:
            -
                App\Service\ApiClient\AlphaVantageClient: '@App\Service\ApiClient\AlphaVantageClient'
                App\Service\ApiClient\MockAlphaVantageClient: '@App\Service\ApiClient\MockAlphaVantageClient'
                App\Service\ApiClient\YahooFinanceClient: '@App\Service\ApiClient\YahooFinanceClient'
                App\Service\ApiClient\MockYahooFinanceClient: '@App\Service\ApiClient\MockYahooFinanceClient'
                App\Service\ApiClient\NewsApiClient: '@App\Service\ApiClient\NewsApiClient'
                App\Service\ApiClient\MockNewsApiClient: '@App\Service\ApiClient\MockNewsApiClient'
                App\Service\ApiClient\SecApiClient: '@App\Service\ApiClient\SecApiClient'
                App\Service\ApiClient\MockSecApiClient: '@App\Service\ApiClient\MockSecApiClient'

    App\Service\ApiClient\StockClientsFactory:
        public: true
        arguments:
            $locator: '@App\Service\ApiClient\StockClientsFactory.locator'
            $useMockData: '%env(bool:USE_MOCK_DATA)%'
        tags: ['container.service_subscriber']

    # --- Service Definitions that USE the API Clients ---
    # Inject the FACTORIES now, not the clients directly.

    App\Service\StockDataService:
        arguments:
            # Inject the factory
            $stockClientsFactory: '@App\Service\ApiClient\StockClientsFactory'
            # Other dependencies (autowired or explicit)
            $entityManager: '@doctrine.orm.entity_manager'
            $cache: '@stock_data.cache' # Ensure stock_data.cache is defined (e.g., in stock_api.yaml)
            $logger: '@logger'
        # No longer injecting individual clients here

    App\Service\SecFilingService:
        arguments:
            # Inject the factory
            $edgarClientFactory: '@App\Service\ApiClient\EdgarClientFactory'
            # Other dependencies... (autowired or explicit)
            $neuronAiService: '@App\Service\NeuronAiService'
            $entityManager: '@doctrine.orm.entity_manager'
            $secFilingRepository: '@App\Repository\SecFilingRepository'
            $logger: '@logger'
        # No longer injecting $edgarApiClient here

    App\Service\LinkedInService:
        arguments:
            # Inject the factory
            $linkedInClientFactory: '@App\Service\ApiClient\LinkedInClientFactory'
            # Other dependencies... (autowired or explicit)
            $entityManager: '@doctrine.orm.entity_manager'
            $logger: '@logger'
            $requestStack: '@request_stack'
        # No longer injecting $linkedInApiClient here

    # --- Other Services ---
    App\Service\LlmClientFactory:
        arguments:
            $apiKey: '%llm.api_key%'
            $baseUrl: '%llm.base_url%'
            $model: '%llm.model%'

    App\Service\NeuronAiService:
        arguments:
            $clientFactory: '@App\Service\LlmClientFactory'

    App\Service\ReportExportService:
        arguments:
            $projectDir: '%kernel.project_dir%'

    # Define the stock data cache service
    stock_data.cache:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        arguments:
            $namespace: 'stock_data'
            $defaultLifetime: 3600
            $directory: '%kernel.cache_dir%/stock_data'
