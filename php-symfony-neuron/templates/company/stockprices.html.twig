{% extends 'base.html.twig' %}

{% block title %}{{ company.name }} - Stock Prices{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .stock-chart-container {
            height: 500px;
            position: relative;
            margin-bottom: 30px;
        }

        .time-range-selector {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .time-range-selector .btn {
            margin: 0 5px;
            padding: 5px 15px;
            border-radius: 20px;
        }

        .time-range-selector .btn.active {
            background-color: #007bff;
            color: white;
        }

        .stock-info {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .current-price {
            font-size: 2rem;
            font-weight: bold;
            margin-right: 15px;
        }

        .price-change {
            font-size: 1.2rem;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .price-change.positive {
            background-color: rgba(40, 167, 69, 0.2);
            color: #28a745;
        }

        .price-change.negative {
            background-color: rgba(220, 53, 69, 0.2);
            color: #dc3545;
        }

        .chart-overlay {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }

        .chart-tooltip {
            background-color: rgba(255, 255, 255, 0.9);
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .interval-selector {
            margin-bottom: 20px;
        }

        .last-updated {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 10px;
        }

        .refresh-btn {
            margin-left: 10px;
        }

        .chart-loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 20;
            display: none;
        }

        /* New styles for enhanced chart */
        .chart-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .chart-type-selector {
            display: flex;
            align-items: center;
        }

        .chart-type-selector .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .chart-indicators {
            display: flex;
            align-items: center;
        }

        .chart-indicators .dropdown {
            margin-left: 10px;
        }

        .volume-container {
            height: 100px;
            margin-top: 10px;
            position: relative;
        }

        .crosshair {
            position: absolute;
            pointer-events: none;
            z-index: 5;
            display: none;
        }

        .crosshair-vertical {
            top: 0;
            bottom: 0;
            width: 1px;
            background-color: rgba(0, 0, 0, 0.3);
        }

        .crosshair-horizontal {
            left: 0;
            right: 0;
            height: 1px;
            background-color: rgba(0, 0, 0, 0.3);
        }

        .price-label {
            position: absolute;
            right: 0;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 0.8rem;
            transform: translateY(-50%);
        }

        .date-label {
            position: absolute;
            bottom: -25px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 0.8rem;
            transform: translateX(-50%);
        }

        .chart-overlay-info {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 10;
            display: none;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>{{ company.name }} ({{ company.tickerSymbol }})</h1>
            <a href="{{ path('company_show', {'id': company.id}) }}" class="btn btn-secondary">Back to Company</a>
        </div>

        <div class="stock-info">
            <div class="current-price">${{ quote.price|number_format(2) }}</div>
            {% if quote.change >= 0 %}
                <div class="price-change positive">
                    +${{ quote.change|number_format(2) }} (+{{ quote.changePercent|number_format(2) }}%)
                </div>
            {% else %}
                <div class="price-change negative">
                    ${{ quote.change|number_format(2) }} ({{ quote.changePercent|number_format(2) }}%)
                </div>
            {% endif %}
            <div class="ms-auto">
                <span class="last-updated">Last updated: {{ lastUpdated|date('M d, Y H:i:s') }}</span>
                <a href="{{ path('company_stockprices', {'id': company.id, 'refresh': true, 'interval': interval, 'range': timeRange}) }}"
                   class="btn btn-sm btn-outline-primary refresh-btn">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </a>
            </div>
        </div>

        <div class="chart-controls">
            <div class="interval-selector">
                <div class="btn-group" role="group">
                    <a href="{{ path('company_stockprices', {'id': company.id, 'interval': 'daily', 'range': timeRange}) }}"
                       class="btn btn-sm {{ interval == 'daily' ? 'btn-primary' : 'btn-outline-primary' }}">Daily</a>
                    <a href="{{ path('company_stockprices', {'id': company.id, 'interval': 'weekly', 'range': timeRange}) }}"
                       class="btn btn-sm {{ interval == 'weekly' ? 'btn-primary' : 'btn-outline-primary' }}">Weekly</a>
                    <a href="{{ path('company_stockprices', {'id': company.id, 'interval': 'monthly', 'range': timeRange}) }}"
                       class="btn btn-sm {{ interval == 'monthly' ? 'btn-primary' : 'btn-outline-primary' }}">Monthly</a>
                </div>
            </div>

            <div class="chart-type-selector">
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-secondary active" data-chart-type="line">Line</button>
                    <button type="button" class="btn btn-outline-secondary" data-chart-type="candlestick">Candlestick</button>
                    <button type="button" class="btn btn-outline-secondary" data-chart-type="ohlc">OHLC</button>
                </div>

                <div class="form-check form-switch ms-3">
                    <input class="form-check-input" type="checkbox" id="showVolumeSwitch" checked>
                    <label class="form-check-label" for="showVolumeSwitch">Volume</label>
                </div>
            </div>
        </div>

        <div class="time-range-selector">
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '1D'}) }}"
               class="btn btn-sm {{ timeRange == '1D' ? 'active' : 'btn-outline-secondary' }}">1D</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '5D'}) }}"
               class="btn btn-sm {{ timeRange == '5D' ? 'active' : 'btn-outline-secondary' }}">5D</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '1M'}) }}"
               class="btn btn-sm {{ timeRange == '1M' ? 'active' : 'btn-outline-secondary' }}">1M</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '3M'}) }}"
               class="btn btn-sm {{ timeRange == '3M' ? 'active' : 'btn-outline-secondary' }}">3M</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '6M'}) }}"
               class="btn btn-sm {{ timeRange == '6M' ? 'active' : 'btn-outline-secondary' }}">6M</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '1Y'}) }}"
               class="btn btn-sm {{ timeRange == '1Y' ? 'active' : 'btn-outline-secondary' }}">1Y</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': '5Y'}) }}"
               class="btn btn-sm {{ timeRange == '5Y' ? 'active' : 'btn-outline-secondary' }}">5Y</a>
            <a href="{{ path('company_stockprices', {'id': company.id, 'interval': interval, 'range': 'MAX'}) }}"
               class="btn btn-sm {{ timeRange == 'MAX' ? 'active' : 'btn-outline-secondary' }}">MAX</a>
        </div>

        <div class="stock-chart-container">
            <div class="chart-loading">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <div class="chart-overlay-info">
                <div class="date"></div>
                <div class="open"></div>
                <div class="high"></div>
                <div class="low"></div>
                <div class="close"></div>
                <div class="volume"></div>
            </div>
            <div class="crosshair crosshair-vertical"></div>
            <div class="crosshair crosshair-horizontal"></div>
            <div class="price-label"></div>
            <div class="date-label"></div>
            <canvas id="stockPriceChart"></canvas>
            <canvas id="volumeChart" class="volume-container"></canvas>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Stock Information</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <th>Previous Close</th>
                                    <td>${{ quote.previousClose|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>Open</th>
                                    <td>${{ quote.open|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>Day's Range</th>
                                    <td>${{ quote.low|number_format(2) }} - ${{ quote.high|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>52 Week Range</th>
                                    <td>${{ quote.fiftyTwoWeekLow|default(0)|number_format(2) }} - ${{ quote.fiftyTwoWeekHigh|default(0)|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>Volume</th>
                                    <td>{{ quote.volume|number_format }}</td>
                                </tr>
                                <tr>
                                    <th>Avg. Volume</th>
                                    <td>{{ quote.averageVolume|default(0)|number_format }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Market Data</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <th>Market Cap</th>
                                    <td>{{ (quote.marketCap / 1000000000)|default(0)|number_format(2) }} B</td>
                                </tr>
                                <tr>
                                    <th>P/E Ratio</th>
                                    <td>{{ quote.peRatio|default(0)|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>EPS (TTM)</th>
                                    <td>${{ quote.eps|default(0)|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>Dividend Yield</th>
                                    <td>{{ quote.dividendYield|default(0)|number_format(2) }}%</td>
                                </tr>
                                <tr>
                                    <th>Beta</th>
                                    <td>{{ quote.beta|default(0)|number_format(2) }}</td>
                                </tr>
                                <tr>
                                    <th>Shares Outstanding</th>
                                    <td>{{ (quote.sharesOutstanding / 1000000)|default(0)|number_format(2) }} M</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.3.0/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.3.1/dist/chartjs-adapter-luxon.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Stock price data from the server
            let priceData = {{ prices|json_encode|raw }};
            const companyId = {{ company.id }};
            const companySymbol = "{{ company.tickerSymbol }}";
            const initialInterval = "{{ interval }}";
            const initialTimeRange = "{{ timeRange }}";
            const enableRealTimeUpdates = {{ enableRealTimeUpdates ? 'true' : 'false' }};

            // Format data for Chart.js
            let labels = priceData.map(item => item.date);
            let prices = priceData.map(item => item.close);
            let volumes = priceData.map(item => item.volume);

            // OHLC data for candlestick/OHLC charts
            let ohlcData = priceData.map(item => ({
                x: new Date(item.date).getTime(),
                o: item.open,
                h: item.high,
                l: item.low,
                c: item.close,
                v: item.volume
            }));

            // Calculate percent change for color
            const startPrice = prices[0];
            const endPrice = prices[prices.length - 1];
            const percentChange = ((endPrice - startPrice) / startPrice) * 100;
            const lineColor = percentChange >= 0 ? '#28a745' : '#dc3545';
            const fillColor = percentChange >= 0 ? 'rgba(40, 167, 69, 0.1)' : 'rgba(220, 53, 69, 0.1)';
            const volumeColor = percentChange >= 0 ? 'rgba(40, 167, 69, 0.5)' : 'rgba(220, 53, 69, 0.5)';

            // Create the price chart
            const ctx = document.getElementById('stockPriceChart').getContext('2d');
            const stockChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '{{ company.tickerSymbol }}',
                        data: prices,
                        borderColor: lineColor,
                        backgroundColor: fillColor,
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1,
                        pointRadius: 0,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: lineColor,
                        pointHoverBorderColor: '#fff',
                        pointHoverBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        legend: {
                            display: false,
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#000',
                            bodyColor: '#000',
                            borderColor: '#ddd',
                            borderWidth: 1,
                            padding: 10,
                            displayColors: false,
                            callbacks: {
                                title: function(tooltipItems) {
                                    return new Date(tooltipItems[0].label).toLocaleDateString('en-US', {
                                        weekday: 'short',
                                        year: 'numeric',
                                        month: 'short',
                                        day: 'numeric'
                                    });
                                },
                                label: function(context) {
                                    const dataPoint = priceData[context.dataIndex];
                                    return [
                                        `Open: $${dataPoint.open.toFixed(2)}`,
                                        `High: $${dataPoint.high.toFixed(2)}`,
                                        `Low: $${dataPoint.low.toFixed(2)}`,
                                        `Close: $${dataPoint.close.toFixed(2)}`,
                                        `Volume: ${dataPoint.volume.toLocaleString()}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxTicksLimit: 10,
                                callback: function(value, index, values) {
                                    if (labels.length <= 10 || index % Math.ceil(labels.length / 10) === 0) {
                                        const date = new Date(labels[index]);
                                        return date.toLocaleDateString('en-US', {
                                            month: 'short',
                                            day: 'numeric'
                                        });
                                    }
                                    return '';
                                }
                            }
                        },
                        y: {
                            position: 'right',
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toFixed(2);
                                }
                            }
                        }
                    }
                }
            });

            // Create the volume chart
            const volumeCtx = document.getElementById('volumeChart').getContext('2d');
            const volumeChart = new Chart(volumeCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Volume',
                        data: volumes,
                        backgroundColor: volumeColor,
                        borderColor: 'transparent',
                        barThickness: 'flex',
                        maxBarThickness: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    scales: {
                        x: {
                            display: false,
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            position: 'right',
                            grid: {
                                display: false
                            },
                            ticks: {
                                callback: function(value) {
                                    if (value >= 1000000) {
                                        return (value / 1000000).toFixed(1) + 'M';
                                    } else if (value >= 1000) {
                                        return (value / 1000).toFixed(1) + 'K';
                                    }
                                    return value;
                                }
                            }
                        }
                    }
                }
            });

            // Chart type switching functionality
            const chartTypeButtons = document.querySelectorAll('[data-chart-type]');
            chartTypeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active class from all buttons
                    chartTypeButtons.forEach(btn => btn.classList.remove('active'));
                    // Add active class to clicked button
                    this.classList.add('active');

                    const chartType = this.getAttribute('data-chart-type');
                    updateChartType(chartType);
                });
            });

            function updateChartType(type) {
                // Destroy existing chart
                stockChart.destroy();

                // Create new chart based on selected type
                let newConfig;

                if (type === 'line') {
                    newConfig = {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: '{{ company.tickerSymbol }}',
                                data: prices,
                                borderColor: lineColor,
                                backgroundColor: fillColor,
                                borderWidth: 2,
                                fill: true,
                                tension: 0.1,
                                pointRadius: 0,
                                pointHoverRadius: 5,
                                pointHoverBackgroundColor: lineColor,
                                pointHoverBorderColor: '#fff',
                                pointHoverBorderWidth: 2
                            }]
                        },
                        options: stockChart.options
                    };
                } else if (type === 'candlestick' || type === 'ohlc') {
                    // For candlestick/OHLC, we need to use a different approach
                    // Since Chart.js doesn't natively support these chart types
                    // Here we simulate them with custom rendering

                    newConfig = {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: '{{ company.tickerSymbol }}',
                                data: prices,
                                borderColor: 'rgba(0,0,0,0)', // Transparent line
                                backgroundColor: 'rgba(0,0,0,0)', // Transparent fill
                                pointRadius: 0
                            }]
                        },
                        options: {
                            ...stockChart.options,
                            animation: false,
                            plugins: {
                                ...stockChart.options.plugins,
                                tooltip: {
                                    ...stockChart.options.plugins.tooltip,
                                    callbacks: {
                                        title: function(tooltipItems) {
                                            return new Date(tooltipItems[0].label).toLocaleDateString('en-US', {
                                                weekday: 'short',
                                                year: 'numeric',
                                                month: 'short',
                                                day: 'numeric'
                                            });
                                        },
                                        label: function(context) {
                                            const dataPoint = priceData[context.dataIndex];
                                            return [
                                                `Open: $${dataPoint.open.toFixed(2)}`,
                                                `High: $${dataPoint.high.toFixed(2)}`,
                                                `Low: $${dataPoint.low.toFixed(2)}`,
                                                `Close: $${dataPoint.close.toFixed(2)}`,
                                                `Volume: ${dataPoint.volume.toLocaleString()}`
                                            ];
                                        }
                                    }
                                }
                            }
                        },
                        plugins: [{
                            afterDraw: function(chart) {
                                const ctx = chart.ctx;
                                const xAxis = chart.scales.x;
                                const yAxis = chart.scales.y;
                                const dataset = chart.data.datasets[0];

                                ctx.save();

                                // Draw candlesticks or OHLC bars
                                for (let i = 0; i < priceData.length; i++) {
                                    const data = priceData[i];
                                    const x = xAxis.getPixelForValue(i);
                                    const open = yAxis.getPixelForValue(data.open);
                                    const high = yAxis.getPixelForValue(data.high);
                                    const low = yAxis.getPixelForValue(data.low);
                                    const close = yAxis.getPixelForValue(data.close);

                                    const color = data.close >= data.open ? '#28a745' : '#dc3545';

                                    ctx.strokeStyle = color;
                                    ctx.lineWidth = 1;

                                    // Draw the high-low line
                                    ctx.beginPath();
                                    ctx.moveTo(x, high);
                                    ctx.lineTo(x, low);
                                    ctx.stroke();

                                    if (type === 'candlestick') {
                                        // Draw the body
                                        ctx.fillStyle = color;
                                        const width = Math.max(1, xAxis.getPixelForValue(1) - xAxis.getPixelForValue(0) - 2);
                                        const halfWidth = width / 2;

                                        ctx.fillRect(x - halfWidth, open, width, close - open);
                                        ctx.strokeRect(x - halfWidth, open, width, close - open);
                                    } else if (type === 'ohlc') {
                                        // Draw the open tick
                                        ctx.beginPath();
                                        ctx.moveTo(x, open);
                                        ctx.lineTo(x - 4, open);
                                        ctx.stroke();

                                        // Draw the close tick
                                        ctx.beginPath();
                                        ctx.moveTo(x, close);
                                        ctx.lineTo(x + 4, close);
                                        ctx.stroke();
                                    }
                                }

                                ctx.restore();
                            }
                        }]
                    };
                }

                // Create new chart
                const newChart = new Chart(ctx, newConfig);

                // Update the reference
                window.stockChart = newChart;
            }

            // Volume toggle functionality
            const volumeSwitch = document.getElementById('showVolumeSwitch');
            volumeSwitch.addEventListener('change', function() {
                const volumeContainer = document.getElementById('volumeChart');
                if (this.checked) {
                    volumeContainer.style.display = 'block';
                } else {
                    volumeContainer.style.display = 'none';
                }
            });

            // Crosshair functionality
            const chartContainer = document.querySelector('.stock-chart-container');
            const crosshairVertical = document.querySelector('.crosshair-vertical');
            const crosshairHorizontal = document.querySelector('.crosshair-horizontal');
            const priceLabel = document.querySelector('.price-label');
            const dateLabel = document.querySelector('.date-label');
            const chartOverlayInfo = document.querySelector('.chart-overlay-info');

            chartContainer.addEventListener('mousemove', function(e) {
                const rect = chartContainer.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                // Only show crosshair if within the main chart area
                if (y < stockChart.chartArea.bottom && y > stockChart.chartArea.top &&
                    x > stockChart.chartArea.left && x < stockChart.chartArea.right) {

                    // Show crosshair
                    crosshairVertical.style.display = 'block';
                    crosshairHorizontal.style.display = 'block';

                    // Position crosshair
                    crosshairVertical.style.left = x + 'px';
                    crosshairHorizontal.style.top = y + 'px';

                    // Get data point
                    const xValue = stockChart.scales.x.getValueForPixel(x);
                    const yValue = stockChart.scales.y.getValueForPixel(y);

                    // Show price label
                    priceLabel.style.display = 'block';
                    priceLabel.style.top = y + 'px';
                    priceLabel.style.right = (rect.width - stockChart.chartArea.right) + 'px';
                    priceLabel.textContent = '$' + yValue.toFixed(2);

                    // Show date label if we have a valid index
                    if (xValue >= 0 && xValue < labels.length) {
                        const dataIndex = Math.round(xValue);
                        if (dataIndex >= 0 && dataIndex < priceData.length) {
                            dateLabel.style.display = 'block';
                            dateLabel.style.left = x + 'px';
                            dateLabel.style.bottom = (rect.height - stockChart.chartArea.bottom) + 'px';

                            const date = new Date(labels[dataIndex]);
                            dateLabel.textContent = date.toLocaleDateString('en-US', {
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric'
                            });

                            // Update overlay info
                            chartOverlayInfo.style.display = 'block';
                            chartOverlayInfo.querySelector('.date').textContent = 'Date: ' + date.toLocaleDateString('en-US', {
                                weekday: 'short',
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric'
                            });
                            chartOverlayInfo.querySelector('.open').textContent = 'Open: $' + priceData[dataIndex].open.toFixed(2);
                            chartOverlayInfo.querySelector('.high').textContent = 'High: $' + priceData[dataIndex].high.toFixed(2);
                            chartOverlayInfo.querySelector('.low').textContent = 'Low: $' + priceData[dataIndex].low.toFixed(2);
                            chartOverlayInfo.querySelector('.close').textContent = 'Close: $' + priceData[dataIndex].close.toFixed(2);
                            chartOverlayInfo.querySelector('.volume').textContent = 'Volume: ' + priceData[dataIndex].volume.toLocaleString();
                        }
                    } else {
                        dateLabel.style.display = 'none';
                        chartOverlayInfo.style.display = 'none';
                    }
                } else {
                    // Hide crosshair and labels when outside chart area
                    crosshairVertical.style.display = 'none';
                    crosshairHorizontal.style.display = 'none';
                    priceLabel.style.display = 'none';
                    dateLabel.style.display = 'none';
                    chartOverlayInfo.style.display = 'none';
                }
            });

            // Hide crosshair when mouse leaves chart container
            chartContainer.addEventListener('mouseleave', function() {
                crosshairVertical.style.display = 'none';
                crosshairHorizontal.style.display = 'none';
                priceLabel.style.display = 'none';
                dateLabel.style.display = 'none';
                chartOverlayInfo.style.display = 'none';
            });

            // Real-time updates for stock price
            if (enableRealTimeUpdates) {
                const updateInterval = 60000; // Update every minute
                const currentPriceElement = document.querySelector('.current-price');
                const priceChangeElement = document.querySelector('.price-change');
                const lastUpdatedElement = document.querySelector('.last-updated');

                function updateLatestPrice() {
                    const loadingIndicator = document.querySelector('.chart-loading');
                    loadingIndicator.style.display = 'flex';

                    fetch(`/company/api/company/${companyId}/latest-price`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const priceInfo = data.price;

                                // Update current price display
                                currentPriceElement.textContent = '$' + parseFloat(priceInfo.price).toFixed(2);

                                // Update price change display
                                const changeText = priceInfo.change >= 0
                                    ? `+$${parseFloat(priceInfo.change).toFixed(2)} (+${parseFloat(priceInfo.changePercent).toFixed(2)}%)`
                                    : `$${parseFloat(priceInfo.change).toFixed(2)} (${parseFloat(priceInfo.changePercent).toFixed(2)}%)`;

                                priceChangeElement.textContent = changeText;
                                priceChangeElement.className = 'price-change ' + (priceInfo.change >= 0 ? 'positive' : 'negative');

                                // Update last updated timestamp
                                lastUpdatedElement.textContent = 'Last updated: ' + new Date(priceInfo.timestamp).toLocaleString();

                                // If it's a new trading day, add the data point to the chart
                                const latestDate = new Date(priceInfo.timestamp).toISOString().split('T')[0];
                                const lastChartDate = labels[labels.length - 1].split('T')[0];

                                if (latestDate !== lastChartDate) {
                                    // Add new data point
                                    const newDataPoint = {
                                        date: latestDate,
                                        open: priceInfo.open,
                                        high: priceInfo.high,
                                        low: priceInfo.low,
                                        close: priceInfo.price,
                                        volume: priceInfo.volume
                                    };

                                    priceData.push(newDataPoint);
                                    labels.push(latestDate);
                                    prices.push(priceInfo.price);
                                    volumes.push(priceInfo.volume);

                                    // Update chart data
                                    stockChart.data.labels = labels;
                                    stockChart.data.datasets[0].data = prices;
                                    volumeChart.data.labels = labels;
                                    volumeChart.data.datasets[0].data = volumes;

                                    // Update OHLC data
                                    ohlcData.push({
                                        x: new Date(latestDate).getTime(),
                                        o: priceInfo.open,
                                        h: priceInfo.high,
                                        l: priceInfo.low,
                                        c: priceInfo.price,
                                        v: priceInfo.volume
                                    });
                                } else {
                                    // Update the last data point
                                    const lastIndex = priceData.length - 1;

                                    // Update high/low if needed
                                    priceData[lastIndex].high = Math.max(priceData[lastIndex].high, priceInfo.price);
                                    priceData[lastIndex].low = Math.min(priceData[lastIndex].low, priceInfo.price);
                                    priceData[lastIndex].close = priceInfo.price;
                                    priceData[lastIndex].volume = priceInfo.volume;

                                    // Update chart data
                                    prices[lastIndex] = priceInfo.price;
                                    volumes[lastIndex] = priceInfo.volume;

                                    // Update OHLC data
                                    ohlcData[lastIndex].h = Math.max(ohlcData[lastIndex].h, priceInfo.price);
                                    ohlcData[lastIndex].l = Math.min(ohlcData[lastIndex].l, priceInfo.price);
                                    ohlcData[lastIndex].c = priceInfo.price;
                                    ohlcData[lastIndex].v = priceInfo.volume;
                                }

                                // Update charts
                                stockChart.update();
                                volumeChart.update();
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching latest price:', error);
                        })
                        .finally(() => {
                            loadingIndicator.style.display = 'none';
                        });
                }

                // Initial update after a short delay
                setTimeout(updateLatestPrice, 5000);

                // Set up interval for regular updates
                setInterval(updateLatestPrice, updateInterval);
            }

            // Function to load historical data for different time ranges and intervals
            function loadHistoricalData(interval, timeRange) {
                const loadingIndicator = document.querySelector('.chart-loading');
                loadingIndicator.style.display = 'flex';

                fetch(`/company/api/company/${companyId}/historical-prices?interval=${interval}&range=${timeRange}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update data
                            priceData = data.prices;
                            labels = priceData.map(item => item.date);
                            prices = priceData.map(item => item.close);
                            volumes = priceData.map(item => item.volume);

                            // Update OHLC data
                            ohlcData = priceData.map(item => ({
                                x: new Date(item.date).getTime(),
                                o: item.open,
                                h: item.high,
                                l: item.low,
                                c: item.close,
                                v: item.volume
                            }));

                            // Calculate new colors based on price change
                            const startPrice = prices[0];
                            const endPrice = prices[prices.length - 1];
                            const percentChange = ((endPrice - startPrice) / startPrice) * 100;
                            const newLineColor = percentChange >= 0 ? '#28a745' : '#dc3545';
                            const newFillColor = percentChange >= 0 ? 'rgba(40, 167, 69, 0.1)' : 'rgba(220, 53, 69, 0.1)';
                            const newVolumeColor = percentChange >= 0 ? 'rgba(40, 167, 69, 0.5)' : 'rgba(220, 53, 69, 0.5)';

                            // Update chart data
                            stockChart.data.labels = labels;
                            stockChart.data.datasets[0].data = prices;
                            stockChart.data.datasets[0].borderColor = newLineColor;
                            stockChart.data.datasets[0].backgroundColor = newFillColor;
                            stockChart.data.datasets[0].pointHoverBackgroundColor = newLineColor;

                            volumeChart.data.labels = labels;
                            volumeChart.data.datasets[0].data = volumes;
                            volumeChart.data.datasets[0].backgroundColor = newVolumeColor;

                            // Update charts
                            stockChart.update();
                            volumeChart.update();

                            // Update last updated timestamp
                            document.querySelector('.last-updated').textContent = 'Last updated: ' + new Date(data.lastUpdated).toLocaleString();
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching historical data:', error);
                    })
                    .finally(() => {
                        loadingIndicator.style.display = 'none';
                    });
            }

            // Add AJAX functionality to time range and interval selectors
            document.querySelectorAll('.time-range-selector .btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Remove active class from all buttons
                    document.querySelectorAll('.time-range-selector .btn').forEach(btn => {
                        btn.classList.remove('active');
                        btn.classList.add('btn-outline-secondary');
                    });

                    // Add active class to clicked button
                    this.classList.add('active');
                    this.classList.remove('btn-outline-secondary');

                    // Get time range from button
                    const timeRange = this.textContent.trim();

                    // Load data for selected time range
                    loadHistoricalData(initialInterval, timeRange);

                    // Update URL without reloading page
                    const url = new URL(this.href);
                    window.history.pushState({}, '', url);
                });
            });

            document.querySelectorAll('.interval-selector .btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Remove active class from all buttons
                    document.querySelectorAll('.interval-selector .btn').forEach(btn => {
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-outline-primary');
                    });

                    // Add active class to clicked button
                    this.classList.add('btn-primary');
                    this.classList.remove('btn-outline-primary');

                    // Get interval from button
                    const interval = this.textContent.trim().toLowerCase();

                    // Get current time range
                    const activeTimeRangeButton = document.querySelector('.time-range-selector .btn.active');
                    const timeRange = activeTimeRangeButton ? activeTimeRangeButton.textContent.trim() : initialTimeRange;

                    // Load data for selected interval and time range
                    loadHistoricalData(interval, timeRange);

                    // Update URL without reloading page
                    const url = new URL(this.href);
                    window.history.pushState({}, '', url);
                });
            });
        });
    </script>
{% endblock %}
