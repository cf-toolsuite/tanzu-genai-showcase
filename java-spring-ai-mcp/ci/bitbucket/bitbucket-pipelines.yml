# BitBucket Pipelines for java-spring-ai-mcp
# Equivalent to GitHub Actions workflow: java-spring-ai-mcp.yml

image: bellsoft/liberica-openjdk-debian:21

definitions:
  caches:
    maven: ~/.m2/repository

pipelines:
  default:
    - step:
        name: Build and Test
        caches:
          - maven
        script:
          - cd java-spring-ai-mcp
          - mvn -B package --file pom.xml
        artifacts:
          - java-spring-ai-mcp/client/target/*.jar
          - java-spring-ai-mcp/server/target/*.jar
          - java-spring-ai-mcp/api/target/*.jar

  branches:
    main:
      - step:
          name: Build and Test
          caches:
            - maven
          script:
            - cd java-spring-ai-mcp
            - mvn -B package --file pom.xml
          artifacts:
            - java-spring-ai-mcp/client/target/*.jar
            - java-spring-ai-mcp/server/target/*.jar
            - java-spring-ai-mcp/api/target/*.jar
      - step:
          name: Upload Artifacts
          script:
            - cd java-spring-ai-mcp
            - pipe: atlassian/bitbucket-upload-file:0.3.2
              variables:
                BITBUCKET_USERNAME: $BITBUCKET_USERNAME
                BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD
                FILENAME: 'client/target/java-spring-ai-mcp-client-*.jar'
            - pipe: atlassian/bitbucket-upload-file:0.3.2
              variables:
                BITBUCKET_USERNAME: $BITBUCKET_USERNAME
                BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD
                FILENAME: 'server/target/java-spring-ai-mcp-server-*.jar'
            - pipe: atlassian/bitbucket-upload-file:0.3.2
              variables:
                BITBUCKET_USERNAME: $BITBUCKET_USERNAME
                BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD
                FILENAME: 'api/target/java-spring-ai-mcp-api-*.jar'
      - step:
          name: Deploy Client to Cloud Foundry
          deployment: client-production
          trigger: manual
          script:
            - apt-get update && apt-get install -y wget gnupg2 apt-transport-https
            - wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            - echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            - apt-get update && apt-get install -y cf8-cli jq
            - cd java-spring-ai-mcp/client
            - echo "Deploying client to Cloud Foundry..."
            - cf api $CF_API
            - cf auth $CF_USERNAME $CF_PASSWORD
            - cf target -o $CF_ORG -s $CF_SPACE

            # Create GenAI service if it doesn't exist
            - |
              if ! cf service tracker-llm-service > /dev/null 2>&1; then
                echo "Creating GenAI service..."
                cf create-service genai standard tracker-llm-service || echo "Service creation failed, it might already exist or plan is not available"
              else
                echo "GenAI service already exists"
              fi

            # Set environment variables
            - |
              APP_NAME=$(grep 'name:' manifest.yml | head -n 1 | awk '{print $2}')
              if [ -z "$APP_NAME" ]; then
                APP_NAME=$(basename $(pwd)) # Fallback to directory name
              fi

              # Push the application without starting it
              if [ "$RANDOM_ROUTE" = "true" ]; then
                echo "Pushing with random route..."
                cf push "$APP_NAME" -f manifest.yml --no-start --random-route
              else
                echo "Pushing with route from manifest..."
                cf push "$APP_NAME" -f manifest.yml --no-start
              fi

              # Set environment variables
              if [ -n "$OPENAI_API_KEY" ]; then
                cf set-env "$APP_NAME" "SPRING_AI_OPENAI_API_KEY" "$OPENAI_API_KEY"
              fi

              # Start the application
              cf start "$APP_NAME"
      - step:
          name: Deploy Server to Cloud Foundry
          deployment: server-production
          trigger: manual
          script:
            - apt-get update && apt-get install -y wget gnupg2 apt-transport-https
            - wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            - echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            - apt-get update && apt-get install -y cf8-cli jq
            - cd java-spring-ai-mcp/server
            - echo "Deploying server to Cloud Foundry..."
            - cf api $CF_API
            - cf auth $CF_USERNAME $CF_PASSWORD
            - cf target -o $CF_ORG -s $CF_SPACE

            # Create UPS if it doesn't exist
            - |
              if ! cf service aviation-stack-service-credentials > /dev/null 2>&1; then
                echo "Creating user-provided service: aviation-stack-service-credentials"
                cf create-user-provided-service aviation-stack-service-credentials -p '{"access_key":"'"$AVIATION_STACK_ACCESS_KEY"'"}' || echo "UPS creation might have failed or already exists"
              else
                echo "UPS aviation-stack-service-credentials already exists."
              fi

            # Set environment variables
            - |
              APP_NAME=$(grep 'name:' manifest.yml | head -n 1 | awk '{print $2}')
              if [ -z "$APP_NAME" ]; then
                APP_NAME=$(basename $(pwd)) # Fallback to directory name
              fi

              # Push the application without starting it
              if [ "$RANDOM_ROUTE" = "true" ]; then
                echo "Pushing with random route..."
                cf push "$APP_NAME" -f manifest.yml --no-start --random-route
              else
                echo "Pushing with route from manifest..."
                cf push "$APP_NAME" -f manifest.yml --no-start
              fi

              # Set environment variables
              if [ -n "$AVIATION_STACK_ACCESS_KEY" ]; then
                cf set-env "$APP_NAME" "AVIATION_STACK_ACCESS_KEY" "$AVIATION_STACK_ACCESS_KEY"
              fi

              # Start the application
              cf start "$APP_NAME"

clone:
  depth: full

options:
  max-time: 20

# Custom deployment variables
# These can be set in the Bitbucket repository settings
# CF_API: Cloud Foundry API endpoint
# CF_USERNAME: Cloud Foundry username
# CF_PASSWORD: Cloud Foundry password
# CF_ORG: Cloud Foundry organization
# CF_SPACE: Cloud Foundry space
# RANDOM_ROUTE: Whether to use a random route (true/false)
# OPENAI_API_KEY: OpenAI API key (for client)
# AVIATION_STACK_ACCESS_KEY: Aviation Stack API key (for server)
