# GitLab CI/CD for go-fiber-langchaingo
# Equivalent to GitHub Actions workflow: go-fiber-langchaingo.yml

image: golang:latest

# Define stages in the pipeline
stages:
  - test
  - build
  - upload

# Cache Go module dependencies
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .go/pkg/mod/

# Run CI only when changes in the project files or CI configuration
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
      changes:
        - go-fiber-langchaingo/**/*
        - go-fiber-langchaingo/ci/gitlab/.gitlab-ci.yml
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - go-fiber-langchaingo/**/*
        - go-fiber-langchaingo/ci/gitlab/.gitlab-ci.yml

# Set environment variables for the pipeline
variables:
  GOPATH: $CI_PROJECT_DIR/.go
  GO111MODULE: "on"

# Test the application
test:
  stage: test
  script:
    - cd go-fiber-langchaingo
    - go test ./... -v

# Build the application
build:
  stage: build
  script:
    - cd go-fiber-langchaingo
    - mkdir -p bin
    - make build || go build -o ./bin/app ./cmd/server
  artifacts:
    paths:
      - go-fiber-langchaingo/bin/
    expire_in: 1 week

# Upload artifacts - only on main branch
upload:
  stage: upload
  script:
    - echo "Uploading build artifacts to GitLab Package Registry"
    - |
      if [ -f "go-fiber-langchaingo/bin/app" ]; then
        # Upload the binary to GitLab Package Registry using the API
        cd go-fiber-langchaingo
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
             --upload-file bin/app \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/go-fiber-langchaingo/${CI_COMMIT_TAG:-latest}/app"
      else
        echo "Build artifact not found"
        exit 1
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  needs:
    - build
